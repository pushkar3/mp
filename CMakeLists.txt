# The name of our project is "mp"

cmake_minimum_required (VERSION 2.6)
project (pallet_planner)

SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "0")
SET(CPACK_PACKAGE_VERSION_PATCH "1")
SET(CPACK_PACKAGE_NAME "pallet_planner")
SET(CPACK_SYSTEM_NAME "i386")

set (CMAKE_VERBOSE_MAKEFILE OFF)

SET (CMAKE_C_FLAGS "-std=c99")
SET (CMAKE_CXX_FLAGS "-Wsign-compare -std=c++0x")

set ( HEADERS
./
/usr/include
/usr/local/include
/usr/include/c++/4.4.3
)

set ( BPP_SRC
3dbpp
3dbpp_input
3dbpp_output
3dbpp_db
3dbpp_postplan
3dbpp_job
)

set ( SIMPLEX_SRC
simplex_main
)

FIND_PACKAGE(Doxygen)
IF (DOXYGEN_FOUND)

  SET(DOXYGEN_INPUT "Doxyfile")
  SET(DOXYGEN_OUTPUT "doc")

  ADD_CUSTOM_COMMAND(
    OUTPUT ${DOXYGEN_OUTPUT}
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDS ${DOXYGEN_INPUT}
    )

  ADD_CUSTOM_TARGET(docs DEPENDS ${DOXYGEN_OUTPUT})

  ADD_CUSTOM_TARGET(docs_forced
    COMMAND ${CMAKE_COMMAND} -E echo_append "Building API Documentation..."
    COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
    COMMAND ${CMAKE_COMMAND} -E echo "Done."
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

ENDIF (DOXYGEN_FOUND)

add_library (3dbpp SHARED ${BPP_SRC})
install (FILES 3dbpp.h DESTINATION include)
install (TARGETS 3dbpp LIBRARY DESTINATION lib)

include_directories (${HEADERS})
add_executable (bpp_stat 3dbpp_stat ${BPP_SRC})
target_link_libraries (bpp_stat m pthread tinyxml2)

include_directories (${HEADERS})
add_executable (bpp_pose 3dbpp_pose ${BPP_SRC})
target_link_libraries (bpp_pose m pthread tinyxml2)

include_directories (${HEADERS})
add_executable (bpp_planner 3dbpp_main ${BPP_SRC})
target_link_libraries (bpp_planner m pthread tinyxml2)

include_directories (${HEADERS})
add_executable (bpp_viewer 3dbpp_viewer ${BPP_SRC})
target_link_libraries (bpp_viewer m pthread tinyxml2)

include_directories ($ENV{GUROBI_HOME}/include)
link_directories ($ENV{GUROBI_HOME}/lib)
add_executable (simplex_planner ${SIMPLEX_SRC} ${BPP_SRC})
target_link_libraries (simplex_planner m pthread gurobi_c++ gurobi50 gurobi_g++4.1 gurobi_g++4.2 tinyxml2)
